* Write a clojure program to play the game of Quidditch (almost).

The game is played between two teams. For the purpose of this program, we are gonna simplify (and modify) them a little.

These are the moves allowed in our version of Quidditch:
1. Score (send the quaffle through the goalpost to get 10 points)
2. Beat (hit teh other team player to make them lose 10 points)
3. Catch the snitch (get 150 points and end the game)

At the end of the game, whichever team has the most points wins.

How would you model the game? Let's start the game, shall we?

#+BEGIN_SRC clojure
(def start-game [team-1 team-2])
;=> return a data structure which represnets the game, we will be passing this around to operate all the moves
#+END_SRC


You have to simulate the game by implementing the following functions:

#+BEGIN_SRC clojure
(defn score [game team])
;=> this should return the game with the team that scored points increased by 10
#+END_SRC

#+BEGIN_SRC clojure
(defn beat [game team])
;=> this should return the game with the opposition team that beat points decreased by 10
#+END_SRC


#+BEGIN_SRC clojure
(defn catch-snitch [game team])
;=> this should return the ended game with the team that caught the snitch increased by 150
#+END_SRC

Now, how do we figure out which team won? Let's get the results!

#+BEGIN_SRC clojure
(defn result [game])
;=> this should return the team that won by the poiunts with which they won
#+END_SRC

Additionally, try adding these constraints:
1. Once a game has ended, no team should be allowed to make a move. How will you handle that?
2. Introduce a new move. How about a foul? If a team fouls, the other team gets a free hit with a random chance of getting a score!

This is hjow the final game will look like:
#+BEGIN_SRC clojure
(-> (start-game :gryffindor :slytherin)
    (score :gryffindor)
    (beat :slytherin)
    (score :slytherin)
    (score :gryffindor)
    (beat :gryffindor)
    (score :slytherin)
    (catch-snitch :gryffindor)
    (result))
;=> Gryffindor won by 150 points!
#+END_SRC
